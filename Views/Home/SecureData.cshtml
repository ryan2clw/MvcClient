@{
    ViewData["Title"] = "Your Sentive Data is safe based on this OpenID authetication!";
}
<div class="header">
    <h4 style="text-align:center">@ViewData["Title"]</h4>
</div>

@using Microsoft.AspNetCore.Authentication

<h5 class="header" style="text-align:center">Claims</h5>

<dl>
    @foreach (var claim in User.Claims)
    {
        <dt>@claim.Type</dt>
        <dd>@claim.Value</dd>
    }
</dl>

<h5 class="header" style="text-align:center">Properties</h5>

<dl>
    @foreach (var prop in (await Context.AuthenticateAsync()).Properties.Items)
    {
        <dt>@prop.Key</dt>
        <dd>@prop.Value</dd>
    }
</dl>
<div class="mb-1">
    <h4 class="header d-inline mr-1 align-middle">Get data from API Call: </h4>
    <button id="call-api-button" type="button" class="btn btn-primary d-inline align-middle border-0 font-weight-bold" onclick="callAPI()">Call API</button>
</div>
<table class="table table-striped" id="myTable">
    <thead class="header" style="text-align:center">
        <tr>
            <td>Type</td>
            <td>Value</td>
        </tr>
    </thead>
</table>
@section Scripts {
<script type="text/javascript">
    function callAPI(){
        $('#myTable').dataTable().api().destroy();
        $('#myTable').DataTable({
            paging: false,
            searching: false,
            drawCallback: function (settings) {
                // Here the response
                var response = settings.json;
                console.log(response);
            },
            ajax: {
                url: '/MvcClient/Home/CallAPI',
                dataSrc: function (json) {
                    var return_data = new Array();
                    for(var i=0;i< json.length; i++){
                        var adjustedValue = json[i].value;
                        var myType = json[i].type;
                        if ((myType == 'auth_time'|| myType == 'exp')|| myType == 'nbf'){
                            adjustedValue = new Date(adjustedValue * 1e3).toISOString();
                        }
                        return_data.push({
                          'type': myType,
                          'value'  : adjustedValue,
                        })
                      }
                      return return_data;
                    }
                },
                columns: [
                    { data: 'type' },
                    { data: 'value' }
                ]}
            );
    }
</script>
}
